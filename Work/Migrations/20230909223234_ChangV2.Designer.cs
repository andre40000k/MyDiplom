// <auto-generated />
using System;
using LoginComponent.DataBase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LoginComponent.Migrations
{
    [DbContext(typeof(AplicationContext))]
    [Migration("20230909223234_ChangV2")]
    partial class ChangV2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LoginComponent.Models.Department.DistrictDepartment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<Guid>("RegionalID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RegionalID");

                    b.ToTable("DistrictDepartment", (string)null);
                });

            modelBuilder.Entity("LoginComponent.Models.Department.LocalDepartment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DistrictId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("LocalDepartment", (string)null);
                });

            modelBuilder.Entity("LoginComponent.Models.Department.RegionalDepartment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RegionalDepartment", (string)null);
                });

            modelBuilder.Entity("LoginComponent.Models.Parcel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CurrentLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DistrictDepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FinalLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LocalDepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RegionalDepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StartLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TransportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DistrictDepartmentId");

                    b.HasIndex("LocalDepartmentId");

                    b.HasIndex("RegionalDepartmentId");

                    b.HasIndex("TransportId");

                    b.HasIndex("UserId");

                    b.ToTable("Packeg", (string)null);
                });

            modelBuilder.Entity("LoginComponent.Models.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpiryTime")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("TokenHash")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("TokenSalt")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("Ts")
                        .HasColumnType("smalldatetime")
                        .HasColumnName("TS");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken", (string)null);
                });

            modelBuilder.Entity("LoginComponent.Models.Transports.Transport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("CurrentLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EndLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StartLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Transport", (string)null);
                });

            modelBuilder.Entity("LoginComponent.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("Ts")
                        .HasColumnType("smalldatetime")
                        .HasColumnName("TS");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("LoginComponent.Models.Department.DistrictDepartment", b =>
                {
                    b.HasOne("LoginComponent.Models.Department.RegionalDepartment", "RegionalDepartment")
                        .WithMany("DistrictDepartments")
                        .HasForeignKey("RegionalID")
                        .IsRequired()
                        .HasConstraintName("FK_DistrictDepartment_RegionalDepartment");

                    b.Navigation("RegionalDepartment");
                });

            modelBuilder.Entity("LoginComponent.Models.Department.LocalDepartment", b =>
                {
                    b.HasOne("LoginComponent.Models.Department.DistrictDepartment", "DistrictDepartment")
                        .WithMany("LocalDepatments")
                        .HasForeignKey("DistrictId")
                        .IsRequired()
                        .HasConstraintName("FK_DistrictDepartment_LocalDepartment");

                    b.Navigation("DistrictDepartment");
                });

            modelBuilder.Entity("LoginComponent.Models.Parcel", b =>
                {
                    b.HasOne("LoginComponent.Models.Department.DistrictDepartment", null)
                        .WithMany("UserPackegs")
                        .HasForeignKey("DistrictDepartmentId");

                    b.HasOne("LoginComponent.Models.Department.LocalDepartment", null)
                        .WithMany("UserPackegs")
                        .HasForeignKey("LocalDepartmentId");

                    b.HasOne("LoginComponent.Models.Department.RegionalDepartment", null)
                        .WithMany("UserPackegs")
                        .HasForeignKey("RegionalDepartmentId");

                    b.HasOne("LoginComponent.Models.Transports.Transport", null)
                        .WithMany("UserPackegs")
                        .HasForeignKey("TransportId");

                    b.HasOne("LoginComponent.Models.User", "User")
                        .WithMany("SentParcels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LoginComponent.Models.RefreshToken", b =>
                {
                    b.HasOne("LoginComponent.Models.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_RefreshToken_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LoginComponent.Models.Department.DistrictDepartment", b =>
                {
                    b.Navigation("LocalDepatments");

                    b.Navigation("UserPackegs");
                });

            modelBuilder.Entity("LoginComponent.Models.Department.LocalDepartment", b =>
                {
                    b.Navigation("UserPackegs");
                });

            modelBuilder.Entity("LoginComponent.Models.Department.RegionalDepartment", b =>
                {
                    b.Navigation("DistrictDepartments");

                    b.Navigation("UserPackegs");
                });

            modelBuilder.Entity("LoginComponent.Models.Transports.Transport", b =>
                {
                    b.Navigation("UserPackegs");
                });

            modelBuilder.Entity("LoginComponent.Models.User", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("SentParcels");
                });
#pragma warning restore 612, 618
        }
    }
}
